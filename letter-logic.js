// letter-logic.js
// Handles auto-detection, templates, and exports for Letters page

// ===== Templates =====
const TEMPLATES = {
  collection: `I am disputing the validity of the collection account reported under [Account Info].
Under the Fair Debt Collection Practices Act, I request validation of this debt.
Please provide proper documentation that establishes your legal authority to collect.`,

  chargeoff: `I am disputing the charge-off reported under [Account Info].
Please provide documentation establishing accuracy, including signed agreements, payment history, and charge-off accounting.`,

  cra: `This letter serves as a formal dispute under the Fair Credit Reporting Act.
I dispute the accuracy of the information reported under [Account Info].
Please reinvestigate and delete unverifiable information as required by 15 U.S.C. §1681i.`,

  cra2: `I previously disputed the account [Account Info], and you verified it without providing verifiable evidence.
Under the FCRA, you are required to provide the method of verification and the name of the furnisher.
Failure to comply will result in further action.`
};

// ===== Extract Text from File (PDF or TXT) =====
async function extractTextFromFile(file) {
  if (!file) return "";
  if (file.type === "application/pdf") {
    const arrayBuffer = await file.arrayBuffer();
    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
    let text = "";
    for (let i = 1; i <= pdf.numPages; i++) {
      const page = await pdf.getPage(i);
      const content = await page.getTextContent();
      text += content.items.map(it => it.str).join(" ") + "\n";
    }
    return text;
  }
  return await file.text();
}

// ===== Detect Letter Type =====
function autoDetectTypeFromText(text) {
  const scores = { collection: 0, chargeoff: 0, cra: 0, cra2: 0 };
  if (/charge[- ]?off/i.test(text)) scores.chargeoff += 2;
  if (/\bcollection(s|)?\b/i.test(text) || /collection agency/i.test(text)) scores.collection += 2;
  if (/experian|equifax|transunion/i.test(text)) scores.cra += 1;
  if (/verified|previously investigated|frivolous/i.test(text)) scores.cra2 += 2;
  const choice = Object.entries(scores).sort((a, b) => b[1] - a[1])[0];
  return choice[1] > 0 ? choice[0] : "";
}

// Hook file upload
document.getElementById("creditReport").addEventListener("change", async (e) => {
  const file = e.target.files[0];
  if (!file) return;
  const text = await extractTextFromFile(file);
  const type = autoDetectTypeFromText(text);
  const sel = document.getElementById("letterType");
  if (type) {
    sel.value = type;
    alert(`System detected: ${type.toUpperCase()} letter`);
  } else {
    alert("No clear match found. Please choose a letter type manually.");
  }
});

// ===== Detect Round 2 =====
async function autoDetectRound2() {
  const file = document.getElementById("responseUpload")?.files?.[0];
  if (!file) { alert("Upload a response letter first."); return; }
  const text = await extractTextFromFile(file);
  if (/verified|previously investigated|frivolous/i.test(text)) {
    document.getElementById("letterType").value = "cra2";
    alert("Detected CRA Round 2 scenario. Selected: CRA2");
  } else {
    alert("Could not detect Round 2 keywords. You can still pick CRA2 manually if appropriate.");
  }
}
window.autoDetectRound2 = autoDetectRound2;

// ===== Generate Letter =====
function generateLetter() {
  const type = document.getElementById("letterType").value;
  if (!type) { alert("Please select a letter type."); return; }

  const name = document.getElementById("yourName").value || "[Your Name]";
  const addr = document.getElementById("yourAddr").value || "[Your Address]\nCity, ST ZIP";
  const date = document.getElementById("letterDate").value || new Date().toISOString().slice(0,10);
  const recipName = document.getElementById("recipName").value || "[Recipient Name]";
  const recipAddr = document.getElementById("recipAddr").value || "[Recipient Address]";
  const acctInfo = document.getElementById("acctInfo").value || "[Account / File Info]";
  const notes = document.getElementById("notes").value || "";

  const header = `${name}\n${addr}\n\n${date}\n\n${recipName}\n${recipAddr}\n`;
  const body = (TEMPLATES[type] || "").replace("[Account Info]", acctInfo) + (notes ? `\n\nNotes: ${notes}` : "");
  const letter = `${header}\n${body}\n\nSincerely,\n${name}\n— Generated by Consumer Dispute Services (NPI Method)`;

  document.getElementById("output").value = letter;

  // Enable export buttons
  const d1 = document.getElementById("docBtn");
  const d2 = document.getElementById("pdfBtn");
  d1.disabled = false; d1.classList.remove("bg-gray-400"); d1.classList.add("bg-indigo-600","hover:bg-indigo-700");
  d2.disabled = false; d2.classList.remove("bg-gray-400"); d2.classList.add("bg-indigo-600","hover:bg-indigo-700");
}
window.generateLetter = generateLetter;

// ===== Copy to Clipboard =====
function copyLetter() {
  const ta = document.getElementById("output");
  ta.select();
  document.execCommand("copy");
  alert("Letter copied to clipboard");
}
window.copyLetter = copyLetter;

// ===== Download DOC =====
function downloadDoc() {
  const content = document.getElementById("output").value || "";
  const html = `<!DOCTYPE html><html><head><meta charset="utf-8"></head><body><pre style="font-family:Georgia,serif;white-space:pre-wrap">${content.replace(/</g,"&lt;")}</pre></body></html>`;
  const blob = new Blob([html], {type:"application/msword"});
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url; a.download = "dispute_letter.doc"; a.click();
  URL.revokeObjectURL(url);
}
window.downloadDoc = downloadDoc;

// ===== Download PDF =====
function downloadPDF() {
  const content = document.getElementById("output").value || "";
  const docDef = {
    content: [
      { text: "Dispute Letter", style: "header" },
      { text: content, margin: [0,10,0,0] }
    ],
    styles: { header: { fontSize: 16, bold: true } },
    defaultStyle: { fontSize: 11 }
  };
  pdfMake.createPdf(docDef).download("dispute_letter.pdf");
}
window.downloadPDF = downloadPDF;
